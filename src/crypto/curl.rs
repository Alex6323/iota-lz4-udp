use crate::constants::*;
use crate::convert::trits::*;

const TRUTH_TABLE: [i8; 11] = [1, 0, -1, 0, 1, -1, 0, 0, -1, 1, 0];
const HASH_SIZE: usize = 243;
const STATE_SIZE: usize = 3 * HASH_SIZE;

pub fn curl(trits: &[i8], num_rounds: usize) -> [i8; HASH_SIZE] {
    assert!(trits.len() % HASH_SIZE == 0);

    let mut state = [0i8; STATE_SIZE];

    for i in (0..trits.len()).step_by(HASH_SIZE) {
        state[0..HASH_SIZE].copy_from_slice(&trits[i..i + HASH_SIZE]);
        unsafe {
            transform(&mut state, num_rounds);
        }
    }

    let mut hash = [0i8; HASH_SIZE];
    hash.copy_from_slice(&state[..HASH_SIZE]);
    hash
}

pub fn curl_tx(trits: TxTrits, num_rounds: usize) -> [i8; HASH_SIZE] {
    let mut state = [0i8; STATE_SIZE];

    for i in (0..TRANSACTION_SIZE_TRITS).step_by(HASH_SIZE) {
        state[0..HASH_SIZE].copy_from_slice(&trits[i..i + HASH_SIZE]);
        unsafe {
            transform(&mut state, num_rounds);
        }
    }

    let mut hash = [0i8; HASH_SIZE];
    hash.copy_from_slice(&state[..HASH_SIZE]);
    hash
}

#[inline]
unsafe fn transform(state: &mut [i8; STATE_SIZE], num_rounds: usize) {
    let mut state2 = [0i8; STATE_SIZE];
    state2.copy_from_slice(state);

    let mut t: *mut i8;
    let mut s1 = state.as_mut_ptr();
    let mut s2 = state2.as_mut_ptr();

    for _ in 0..num_rounds {
        *s1 = TRUTH_TABLE[(*s2 + (*s2.offset(364) << 2) + 5) as usize];

        for i in 0..364 {
            *s1.offset(2 * i + 1) =
                TRUTH_TABLE[(*s2.offset(364 - i) + (*s2.offset(729 - (i + 1)) << 2) + 5) as usize];
            *s1.offset(2 * i + 2) = TRUTH_TABLE
                [(*s2.offset(729 - (i + 1)) + (*s2.offset(364 - (i + 1)) << 2) + 5) as usize];
        }

        t = s1;
        s1 = s2;
        s2 = t;
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::constants::*;
    use crate::convert::{trits, tryte_string, trytes};
    use std::time::{Duration, Instant};

    const MAINNET_TRYTES_1: &str = "TLFCFY9IMZVINTAZRCUWTKAFENIBIFOGKWDZQIRTYSVVHTSIIZZ9RLUYVTLXEHACXIUFJJQNFRJYMGGYDWOBNMTPFE9CGVVTREVUJKIXRHSOPFAXMNEMHEW9ZE9HVFEDEORKWGLNECZ9MXLDHPBAOMO9ZMSZJCZLAWWZKOLHBASHYNMCBCPZOXOLLVMFZVCTUDQZSIUSITRDHHXGAOVTOMSKDTZXLSCNHNXJNVGOTZPJDRHOBUAPIAIGLCETVDWSOPEKAOWBNUIEUTTLPFQLRYVRJQJOCBVOZEK9TQMJQUPEZKLHIVMO9TRIUBQNXJYIXFUWFUYWDIIDBQXRYULR9RXPSLTRFY9IIMQBLGOXUZJAKFSEJCSTYP9SWRFCNTMDMRFFWCVZTNFYLFZISPCQ99OSTMJBNLYCQLKWETRLJEOEBJZBO9ZUZMGQIRCCLBANSVYABGKMQCKWIWHHH9FGKGIURCJDKTIQBFENQCYWAX9WHNQ9OKGIWILNFJGMERJNBHDPNFCASDKZLOXLALOSMUFXYKKCDKWVX9PBOVXMAICVTHBLPWPFWJWYBTLJLXNOHREEFTJDLTYPPFMZ9MTPBHNXQL9MXRLGMKRN9EJYZMDZEOZOMKVYWKORKIBKDYZTCPOHYIADIVJWCHRVWCE9DSSHIEEINJYQWBFBTOCZOBL9LLFKWIFAJT9ZQKEUZTBARTEYUBYQOKMRMKWLTJOPVKIDXIUWQFLVWBTAYNOREZSCKAGRGVRLQUBUGKKHLL9YBFMGUMNSUMAXMCRQOQHBYJJRBMFQIUPZEBXFMHYJMAMAHUMMBLRDPBIOMJ9OCHBSBIFX9YSXPPVDMUCICHCSYRWUXXUEROHXGGEJBFJE9S9QGAQ9YOPIZOKGXRXMMFBLGVMC9QXJZTI99TATFJDJORMGJPAQGQICFHYAMWEUKWYYKIGTWYPNC9ZPQEKWAOZVCBIPZUTZUKJXFPWTQUKWIYJBULBJEJZGYEHVYUHFROLQYYPI9WCXHHWEITITPTXMTBWLJRAYV9LZK9FVGBOQRSWEFRMWBKBHAYWETHDTAAPOPPHFOX9PYQAXDVMWXGW9HDTLSINGRWGODCBNVXXYVDKJ9OROIZAULXMZUEVSDPWUJC9FEQAWMDOI9TALZAHX9ZHYSQEJOSZTHZPKWMZBTWUKNJUJNTZRWEYVWUAXVEP9NSZVYHLHZWDDTCQQTCDHTQPZXTM9ERHNNEORYBUKIRJPZORWXJDRRURZCBYLMFZKSZZVJIWXBXSKJMKUAFYKRQKVIGJJGYLXKFWZEIU9JJXRQSOFDLGXELTVBXKPDLKRLJTGVOD9QGIVVWS9EZAMBPDIEABEJJKTYQZVOD9TIGXPDJGJBRLHXCKKFFVQXFPQNKLMOMOJUDNFZCYEP9CQVNQKRYLCMCFNM9JIE9XUCDBX9ABNHZTSRROFYZCXDRLRBMYYRWUEWHC9QGGHBIQVBISISOZWXGXKQWSOASERXWNQXHWUGXDKIVDDWZZIRIERRSEOMEREYYCO9QIXKQOZQZALPBNQCBJWPV9BYDGYTDJPHXFZQ9CQZIDZTORKIABS9LFWOPWISFESVOTWIBTGDFIZBDOAJO9DJVAIQVUYEAWPRETXYWFMMUUUEUMWPGTWEUSZHJUCYGZDCSGVZGNTJBWGHGYZEOTOVIYAODKWJJLJFZGIKVGUYXRGAFMOFDM9SHSWVSDKAJGEVCORATXJHEGLYTVCGCTXZVUFVLZ9CYFCA9MM9STIZHKTGYJUACFVEGSZYJBNRWTRO9JUWZWOSPGJYIRTQSD9EPHONGYDWUQXYRHGXUSVGIAPVGOLLFQTQOYSOMHAOCNVKLPGRKIEVZGCFVWLTBEMM9QMUML9RVYCMOFIUCNTTALZKSGIPVNLFUGDPTHVGKDUIOZMKAEPYSYZTNFTMWJY99VGIM9YHI9WIVVJAANTHPKT9HOWWZSYRDMVJCSKASOZOOPAUOMMSOWNUTTGREQWPQDKRGGSODHKPFUIXKLVDFJSOQH9ZYMREQNXHHPOEISKPGTNIEBKV9SEFTKZZZVXQAYFPYTDMJVUULL9YNMITHTRB9GKILOFJCCYXKMPIYNNOXTVNLDKTODGEADIRIUXHNGVAAIEFYG9BE9BRNAZUABPF9BVODCZGPXBLBVJIXYLLYDVDUKVYGIWETMSKYXGYMXSXGKPDZMG9NOFIMSKFKIHTQSAVGIWERREF9MEAOCDE99FXRR9FDCKOZOJBTOZEVLLCASBONUMPDVD9XWSHEGZ9999999999999999999999999999999999999999999999VPRPPZD99A99999999J99999999KOJZIA9PSFRKG9ZUOJO9PGDIEFPGPSDKVPVBSXDIOOXAPZHKLJHEULIJKYRTDXOJKTRFYYSABGTBRKVCBBZZSWTVHQSQGJKQAHLINBNNLFTQERSITF9BAJCODBNLLQEQZETPQBGWFYCOBUARDAGTCGQCGOUBLA9999QPBMLSSKBO9ILX9QKYCAXNHLK9KFUJYO99GOO99VYROHOVXACRKYPFVY9JRSHJIKFGBHOCXQFPMZZ9999999999999999999999999999999HKJSFUCME999999999MMMMMMMMMCVMNOI9PFCHLRVXSUEOCRLTRMUF";
    const MAINNET_HASH_1: &str =
        "MGPBAHYHKSQMMXXONAOOEDQS9RFEKMOOJUCGXSFYLXBHQFWIHMJGFJWDSZTGKHNBCSENCXSPQOSZ99999";

    const MAINNET_TRYTES_2: &str
    const MAINNET_HASH_2: &str =
        "TIXEPIEYMGURTQ9ABVYVQSWMNGCVQFASMFAEQWUZCLIWLCDIGYVXOEJBBEMZOIHAYSUQMEFOGZBXUMHQW";

    #[test]
    fn test_curl_mainnet_trytes() {
        let trits = trits::from_tryte_string(&MAINNET_TRYTES_1);
        assert_eq!(8019, trits.len());

        let start = Instant::now();
        let curl_trits = curl(&trits, 81);
        let stop = start.elapsed();

        let curl_hash = tryte_string::from_trits_243(&curl_trits);
        println!("{} ns", u64::from(stop.subsec_nanos()));
        println!("{}", curl_hash);
        assert_eq!(MAINNET_HASH_1, curl_hash);
    }

    #[test]
    fn test_curl_mainnet_trytes2() {
        let trits = trits::from_tryte_string(&MAINNET_TRYTES_2);
        assert_eq!(8019, trits.len());

        let start = Instant::now();
        let curl_trits = curl(&trits, 81);
        let stop = start.elapsed();

        let curl_hash = tryte_string::from_trits_243(&curl_trits);
        println!("{} ns", u64::from(stop.subsec_nanos()));
        println!("{}", curl_hash);
        assert_eq!(MAINNET_HASH_2, curl_hash);
    }
}
